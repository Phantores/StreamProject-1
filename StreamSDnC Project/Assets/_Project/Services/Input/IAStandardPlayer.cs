//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Project/Services/Input/IAStandardPlayer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Controls
{
    public partial class @IAStandardPlayer: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @IAStandardPlayer()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""IAStandardPlayer"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""51659e4c-1725-4183-a203-bbc5e4ae32cc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e3db9753-3b75-4f0f-8670-2aded5b2f7ee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""d5f6a894-02d1-4e0b-822c-928175cef116"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2cb449d7-6776-494a-a57c-b2a19561d781"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""4973b95e-455e-4feb-b3f4-273272587c12"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""6ffc224e-67e0-4602-9fe3-0399a4462bfe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""fe3fb842-003d-4f62-8a52-4d803a0f2e72"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""ff0fc63f-13d3-41f3-b368-f86a4140c102"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c10818a6-86e8-4aa8-9f9a-ad9fe3684003"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""49dcb6e2-4f72-47b0-b9d0-020ade1832be"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""95fc8424-8495-4fc8-9a22-35900e50656d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""77906c8b-3620-4db8-a5f9-19fa7119fff4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""89a5a2aa-2aa3-4a6c-a024-882b56b1cda1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ee725d3b-4e6d-44ac-9e54-464f7632cf90"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcb86223-1b86-4d52-a039-006cba95fa18"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e725cfc-bcac-4591-9ef7-a946d813a94e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07e01127-e008-4de0-97da-384f29eac4b5"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d77f956-facb-4b11-9ca2-1f4ea88057e0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac82aacf-64ec-47e2-93dc-5513dd03d149"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Firing"",
            ""id"": ""20c183de-445f-4d35-9cf3-8c797266de0e"",
            ""actions"": [
                {
                    ""name"": ""HoldFire"",
                    ""type"": ""Button"",
                    ""id"": ""ccde2084-abc3-4de9-8fd9-2972895ac791"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressFire"",
                    ""type"": ""Button"",
                    ""id"": ""d343f990-3927-438c-adc4-02d00494f3fb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseOne"",
                    ""type"": ""Button"",
                    ""id"": ""02226baf-1bbb-49ed-af24-97f676e3c406"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseTwo"",
                    ""type"": ""Button"",
                    ""id"": ""39fcfda1-1872-4a35-a1b2-ed5bedf044a1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Holster"",
                    ""type"": ""Button"",
                    ""id"": ""457627a8-837b-4fd6-bd74-ae43ea1d470f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""452ea368-b0ed-4806-8b1c-42a604c193ee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""85196cfb-abc7-4bad-893d-32a178248279"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29f11af6-e361-4be9-8daa-230a9ac2c7d6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""HoldFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c24a7df8-1d4e-4291-8cef-b407b17dd74e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""PressFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a81174c-b5e4-4e26-80df-8c8d7a5d993c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""ChooseOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b0aaf11-b703-404f-ac35-cfc0b6fb798d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""ChooseTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c737184b-0701-4135-b476-db6ace99d17d"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Holster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0da3450-5046-40f7-b7da-511df1632e02"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24eb7f57-8d66-42a8-b0fb-9a318218ba4e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Main
            m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
            m_Main_Move = m_Main.FindAction("Move", throwIfNotFound: true);
            m_Main_Mouse = m_Main.FindAction("Mouse", throwIfNotFound: true);
            m_Main_Jump = m_Main.FindAction("Jump", throwIfNotFound: true);
            m_Main_Run = m_Main.FindAction("Run", throwIfNotFound: true);
            m_Main_Crouch = m_Main.FindAction("Crouch", throwIfNotFound: true);
            m_Main_MousePos = m_Main.FindAction("MousePos", throwIfNotFound: true);
            m_Main_Interact = m_Main.FindAction("Interact", throwIfNotFound: true);
            // Firing
            m_Firing = asset.FindActionMap("Firing", throwIfNotFound: true);
            m_Firing_HoldFire = m_Firing.FindAction("HoldFire", throwIfNotFound: true);
            m_Firing_PressFire = m_Firing.FindAction("PressFire", throwIfNotFound: true);
            m_Firing_ChooseOne = m_Firing.FindAction("ChooseOne", throwIfNotFound: true);
            m_Firing_ChooseTwo = m_Firing.FindAction("ChooseTwo", throwIfNotFound: true);
            m_Firing_Holster = m_Firing.FindAction("Holster", throwIfNotFound: true);
            m_Firing_Reload = m_Firing.FindAction("Reload", throwIfNotFound: true);
            m_Firing_Aim = m_Firing.FindAction("Aim", throwIfNotFound: true);
        }

        ~@IAStandardPlayer()
        {
            UnityEngine.Debug.Assert(!m_Main.enabled, "This will cause a leak and performance issues, IAStandardPlayer.Main.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Firing.enabled, "This will cause a leak and performance issues, IAStandardPlayer.Firing.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Main
        private readonly InputActionMap m_Main;
        private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
        private readonly InputAction m_Main_Move;
        private readonly InputAction m_Main_Mouse;
        private readonly InputAction m_Main_Jump;
        private readonly InputAction m_Main_Run;
        private readonly InputAction m_Main_Crouch;
        private readonly InputAction m_Main_MousePos;
        private readonly InputAction m_Main_Interact;
        public struct MainActions
        {
            private @IAStandardPlayer m_Wrapper;
            public MainActions(@IAStandardPlayer wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Main_Move;
            public InputAction @Mouse => m_Wrapper.m_Main_Mouse;
            public InputAction @Jump => m_Wrapper.m_Main_Jump;
            public InputAction @Run => m_Wrapper.m_Main_Run;
            public InputAction @Crouch => m_Wrapper.m_Main_Crouch;
            public InputAction @MousePos => m_Wrapper.m_Main_MousePos;
            public InputAction @Interact => m_Wrapper.m_Main_Interact;
            public InputActionMap Get() { return m_Wrapper.m_Main; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
            public void AddCallbacks(IMainActions instance)
            {
                if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }

            private void UnregisterCallbacks(IMainActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Mouse.started -= instance.OnMouse;
                @Mouse.performed -= instance.OnMouse;
                @Mouse.canceled -= instance.OnMouse;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Run.started -= instance.OnRun;
                @Run.performed -= instance.OnRun;
                @Run.canceled -= instance.OnRun;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @MousePos.started -= instance.OnMousePos;
                @MousePos.performed -= instance.OnMousePos;
                @MousePos.canceled -= instance.OnMousePos;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
            }

            public void RemoveCallbacks(IMainActions instance)
            {
                if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMainActions instance)
            {
                foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MainActions @Main => new MainActions(this);

        // Firing
        private readonly InputActionMap m_Firing;
        private List<IFiringActions> m_FiringActionsCallbackInterfaces = new List<IFiringActions>();
        private readonly InputAction m_Firing_HoldFire;
        private readonly InputAction m_Firing_PressFire;
        private readonly InputAction m_Firing_ChooseOne;
        private readonly InputAction m_Firing_ChooseTwo;
        private readonly InputAction m_Firing_Holster;
        private readonly InputAction m_Firing_Reload;
        private readonly InputAction m_Firing_Aim;
        public struct FiringActions
        {
            private @IAStandardPlayer m_Wrapper;
            public FiringActions(@IAStandardPlayer wrapper) { m_Wrapper = wrapper; }
            public InputAction @HoldFire => m_Wrapper.m_Firing_HoldFire;
            public InputAction @PressFire => m_Wrapper.m_Firing_PressFire;
            public InputAction @ChooseOne => m_Wrapper.m_Firing_ChooseOne;
            public InputAction @ChooseTwo => m_Wrapper.m_Firing_ChooseTwo;
            public InputAction @Holster => m_Wrapper.m_Firing_Holster;
            public InputAction @Reload => m_Wrapper.m_Firing_Reload;
            public InputAction @Aim => m_Wrapper.m_Firing_Aim;
            public InputActionMap Get() { return m_Wrapper.m_Firing; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FiringActions set) { return set.Get(); }
            public void AddCallbacks(IFiringActions instance)
            {
                if (instance == null || m_Wrapper.m_FiringActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_FiringActionsCallbackInterfaces.Add(instance);
                @HoldFire.started += instance.OnHoldFire;
                @HoldFire.performed += instance.OnHoldFire;
                @HoldFire.canceled += instance.OnHoldFire;
                @PressFire.started += instance.OnPressFire;
                @PressFire.performed += instance.OnPressFire;
                @PressFire.canceled += instance.OnPressFire;
                @ChooseOne.started += instance.OnChooseOne;
                @ChooseOne.performed += instance.OnChooseOne;
                @ChooseOne.canceled += instance.OnChooseOne;
                @ChooseTwo.started += instance.OnChooseTwo;
                @ChooseTwo.performed += instance.OnChooseTwo;
                @ChooseTwo.canceled += instance.OnChooseTwo;
                @Holster.started += instance.OnHolster;
                @Holster.performed += instance.OnHolster;
                @Holster.canceled += instance.OnHolster;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }

            private void UnregisterCallbacks(IFiringActions instance)
            {
                @HoldFire.started -= instance.OnHoldFire;
                @HoldFire.performed -= instance.OnHoldFire;
                @HoldFire.canceled -= instance.OnHoldFire;
                @PressFire.started -= instance.OnPressFire;
                @PressFire.performed -= instance.OnPressFire;
                @PressFire.canceled -= instance.OnPressFire;
                @ChooseOne.started -= instance.OnChooseOne;
                @ChooseOne.performed -= instance.OnChooseOne;
                @ChooseOne.canceled -= instance.OnChooseOne;
                @ChooseTwo.started -= instance.OnChooseTwo;
                @ChooseTwo.performed -= instance.OnChooseTwo;
                @ChooseTwo.canceled -= instance.OnChooseTwo;
                @Holster.started -= instance.OnHolster;
                @Holster.performed -= instance.OnHolster;
                @Holster.canceled -= instance.OnHolster;
                @Reload.started -= instance.OnReload;
                @Reload.performed -= instance.OnReload;
                @Reload.canceled -= instance.OnReload;
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
            }

            public void RemoveCallbacks(IFiringActions instance)
            {
                if (m_Wrapper.m_FiringActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IFiringActions instance)
            {
                foreach (var item in m_Wrapper.m_FiringActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_FiringActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public FiringActions @Firing => new FiringActions(this);
        private int m_MouseKeyboardSchemeIndex = -1;
        public InputControlScheme MouseKeyboardScheme
        {
            get
            {
                if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
                return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
            }
        }
        public interface IMainActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnMouse(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnMousePos(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
        public interface IFiringActions
        {
            void OnHoldFire(InputAction.CallbackContext context);
            void OnPressFire(InputAction.CallbackContext context);
            void OnChooseOne(InputAction.CallbackContext context);
            void OnChooseTwo(InputAction.CallbackContext context);
            void OnHolster(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
        }
    }
}
